# -*- coding: utf-8 -*-
"""SpamemailDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fp7qxCyWaWeX-SJSLUN-v1gPJHVr-2rQ

# **Email Spam Detection-** **Using Linear regeration**

**Email Classifier using scikit-learn and basic dataset**


*   **scikit-learn:**
       It is Powerfull library for machine learning.

       Provides tools for:


         1.   Data prepocessing
         2.   Classification (e.g, Navie Bayes, SVM)
         3.   Regression
         4.   Clustering
         5.  Model Evaluation
      Easy to use and widely used in real-world ML projects.


*   **Naive Bayes:**
          A classification alogorithm based on Bayes Theorem.
          Assumes that all features are independent
          very fast and works well for text classification like:
           
          1.   Spam detection
          2.   Sentiment analysis
        Types : Guassian, multinomial, Bernoulli
        (Multinomial is used for text)
"""

###Logistic Regression#####
#Step 1: importing Libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report


#Step 2: Creating Sample dataset
data={
    'text':[
        'Win money now!',
        'Hello, how are you?',
        'Claim your free prize now',
        'lets meet tomorrow',
        'Free entry in a contest',
        'Are we still on for dinner',
        'Congratulations, you have won a lottery',
        'Hi, call me when you get this message',
        'Exclusive offer: Get a free trial!',
        'Meeting rescheduled to 3 PM',
        'Your account has been credited',
        'Can you send me the report?',
        'Big discounts just for you',
        'Reminder about our meeting',
        'Click here to claim your reward',
        'Please review the document',
        'You have a new message',
        'Urgent: Your account is compromised',
        'Dinner plans confirmed',
        'Limited time offer: Don\'t miss out!'

    ],
    'label':[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1] #1:spam,0:ham

}
df=pd.DataFrame(data)

# Step to save the DataFrame to a CSV file (as requested previously)
df.to_csv('email_data.csv', index=False)


#Step 3: Split the data
x_train, x_test, y_train,y_test=train_test_split(df['text'],df['label'],test_size=0.3,random_state=42)

#Step 4: Text Vectorization
vectorizer = CountVectorizer()
x_train_vec=vectorizer.fit_transform(x_train)
x_test_vec=vectorizer.transform(x_test)

#Step 5: Train model
model= MultinomialNB()
model.fit(x_train_vec,y_train)

#Step 6: Evaluation
y_pred=model.predict(x_test_vec)
print("Accuracy:",accuracy_score(y_test, y_pred))
print("\n Classification Report:\n")
print(classification_report(y_test, y_pred))

#Step 7: Test on new messsage
sample =["You have won a free ticket!"]
sample_vec= vectorizer.transform(sample)
prediction = model.predict(sample_vec)[0]

# Use an if-else statement to print the desired output
if prediction == 1:
    print("\n Prediction for sample: Spam detected")
else:
    print("\n Prediction for sample: Not spam detected")